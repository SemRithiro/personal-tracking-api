<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rithiro.personaltracking.modules.auth.mappers.Oauth2Mapper">
    <update id="revokeCurrentToken">
        UPDATE `oauth2_access_tokens` SET revoked = 1 WHERE token_id = #{tokenId};
        UPDATE `oauth2_refresh_tokens` SET revoked = 1 WHERE token_id = #{tokenId};
    </update>

    <update id="revokeOtherTokenByUserId">
        UPDATE `oauth2_access_tokens` SET revoked = 1 WHERE user_id = #{userId} AND token_id != #{tokenId};
        UPDATE `oauth2_refresh_tokens` SET revoked = 1 WHERE user_id = #{userId} AND token_id != #{tokenId};
    </update>

    <update id="revokeAllTokenByUserId">
        UPDATE `oauth2_access_tokens` SET revoked = 1 WHERE user_id = #{userId};
        UPDATE `oauth2_refresh_tokens` SET revoked = 1 WHERE user_id = #{userId};
    </update>

    <sql id="BASE_FIELDS">
        `token_id`,
        `token_value`,
        `user_id`,
        `issued_at`,
        `expires_at`,
        `user_agent`,
        `operating_system`,
        `remote_addr`
    </sql>
    <insert id="insertOauth2AccessToken">
        INSERT INTO `oauth2_access_tokens` (
            <include refid="BASE_FIELDS"></include>
        ) VALUES (
            #{oauth2Token.tokenId},
            #{oauth2Token.tokenValue},
            #{oauth2Token.userId},
            #{oauth2Token.issuedAt},
            #{oauth2Token.expiresAt},
            #{oauth2Token.userAgent},
            #{oauth2Token.operatingSystem},
            #{oauth2Token.remoteAddr}
        )
    </insert>

    <insert id="insertOauth2RefreshToken">
        INSERT INTO `oauth2_refresh_tokens` (
            <include refid="BASE_FIELDS"></include>
        ) VALUES (
            #{oauth2Token.tokenId},
            #{oauth2Token.tokenValue},
            #{oauth2Token.userId},
            #{oauth2Token.issuedAt},
            #{oauth2Token.expiresAt},
            #{oauth2Token.userAgent},
            #{oauth2Token.operatingSystem},
            #{oauth2Token.remoteAddr}
        )
    </insert>

    <insert id="insertOauth2RefreshTokenUsage">
        INSERT INTO `oauth2_refresh_token_usage` (
            `token_id`,
            `token_value`,
            `used_at`,
            `user_agent`,
            `operating_system`,
            `remote_addr`
        ) VALUES (
            #{oauth2RefreshTokenUsage.tokenId},
            #{oauth2RefreshTokenUsage.tokenValue},
            NOW(),
            #{oauth2RefreshTokenUsage.userAgent},
            #{oauth2RefreshTokenUsage.operatingSystem},
            #{oauth2RefreshTokenUsage.remoteAddr}
        )
    </insert>

    <select id="validateRefreshToken">
        SELECT 
            r.token_id, 
            r.revoked,
            COUNT(u.id) AS usage_count
        FROM oauth2_refresh_tokens r
        LEFT JOIN oauth2_refresh_token_usage u ON r.token_id = u.token_id AND r.token_value = u.token_value
        WHERE r.token_value = #{tokenValue}
        GROUP BY r.token_id, r.revoked
    </select>

    <delete id="removeExpiredToken">
        DELETE u FROM oauth2_refresh_token_usage u
        JOIN oauth2_refresh_tokens r ON u.token_id = r.token_id AND r.expires_at &lt; NOW();

        DELETE FROM oauth2_refresh_tokens WHERE expires_at &lt; NOW();
        DELETE FROM oauth2_access_tokens WHERE expires_at &lt; NOW();
    </delete>
</mapper>